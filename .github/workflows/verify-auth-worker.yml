name: Verify Cloudflare Auth Worker

on:
  # Run on every push and PR to monitor auth worker health
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Run daily at 9:00 AM UTC to catch infrastructure issues
  schedule:
    - cron: '0 9 * * *'
  
  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  verify-auth-worker:
    runs-on: ubuntu-latest
    name: Test Cloudflare Auth Worker Health
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test DNS Resolution
      run: |
        echo "üîç Testing DNS resolution for auth.tinova-ai.cc..."
        nslookup auth.tinova-ai.cc
        echo "‚úÖ DNS resolution successful"

    - name: Test SSL Certificate
      run: |
        echo "üîí Testing SSL certificate validity..."
        echo | openssl s_client -servername auth.tinova-ai.cc -connect auth.tinova-ai.cc:443 2>/dev/null | openssl x509 -noout -dates
        echo "‚úÖ SSL certificate is valid"

    - name: Test Auth Worker Health Endpoint
      run: |
        echo "ü©∫ Testing auth worker health endpoint..."
        
        # Test the health endpoint first (known working endpoint)
        HEALTH_RESPONSE=$(curl -s https://auth.tinova-ai.cc/health)
        HEALTH_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://auth.tinova-ai.cc/health)
        
        echo "Health endpoint response: '$HEALTH_RESPONSE'"
        echo "Health endpoint status code: $HEALTH_CODE"
        
        if [ "$HEALTH_CODE" -eq 200 ] && echo "$HEALTH_RESPONSE" | grep -q "healthy"; then
          echo "‚úÖ Auth worker is deployed and running"
        else
          echo "‚ùå Auth worker health check failed - worker may not be deployed"
          echo "‚ÑπÔ∏è  Expected: 200 status with 'healthy' in response"
          echo "‚ÑπÔ∏è  Actual: $HEALTH_CODE status with '$HEALTH_RESPONSE'"
          exit 1
        fi

    - name: Test OAuth API Endpoint Functionality
      run: |
        echo "üîë Testing OAuth API endpoint functionality..."
        
        # Test POST with missing code (should return proper error)
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{}')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "Empty POST response: $BODY"
        echo "HTTP code: $HTTP_CODE"
        
        # Test POST with invalid code (should return different error)
        RESPONSE2=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{"code":"invalid_test_code","state":"test_state"}')
        
        HTTP_CODE2=$(echo "$RESPONSE2" | tail -n1 | cut -d: -f2)
        BODY2=$(echo "$RESPONSE2" | head -n -1)
        
        echo "Invalid code response: $BODY2"
        echo "HTTP code: $HTTP_CODE2"
        
        # Verify both requests return proper JSON errors with expected codes
        if echo "$BODY" | grep -q '"Missing authorization code"' && [ "$HTTP_CODE" -eq 400 ]; then
          echo "‚úÖ Missing code validation working correctly"
        else
          echo "‚ö†Ô∏è  Missing code validation: Expected 400 with 'Missing authorization code'"
        fi
        
        if echo "$BODY2" | grep -q '"Failed to exchange code for token"' && [ "$HTTP_CODE2" -eq 400 ]; then
          echo "‚úÖ Invalid code handling working correctly"
        else
          echo "‚ö†Ô∏è  Invalid code handling: Expected 400 with 'Failed to exchange code for token'"
        fi
        
        if echo "$BODY" | grep -q '"error"' && echo "$BODY2" | grep -q '"error"'; then
          echo "‚úÖ OAuth endpoint is functional and returns proper JSON errors"
        else
          echo "‚ùå OAuth endpoint error handling needs improvement"
          exit 1
        fi

    - name: Test CORS Configuration
      run: |
        echo "üåê Testing CORS configuration..."
        
        # Test CORS preflight for the OAuth endpoint
        CORS_HEADERS=$(curl -s -I \
          -X OPTIONS https://auth.tinova-ai.cc/api/github-oauth \
          -H "Origin: https://tinova-ai.cc" \
          -H "Access-Control-Request-Method: POST" \
          -H "Access-Control-Request-Headers: Content-Type")
        
        echo "CORS preflight response:"
        echo "$CORS_HEADERS"
        
        # Check for required CORS headers
        if echo "$CORS_HEADERS" | grep -q "Access-Control-Allow-Origin.*tinova-ai.cc"; then
          echo "‚úÖ CORS origin header configured correctly"
        else
          echo "‚ö†Ô∏è  CORS origin header missing or incorrect"
        fi
        
        if echo "$CORS_HEADERS" | grep -q "Access-Control-Allow-Methods.*POST"; then
          echo "‚úÖ CORS methods configured correctly"
        else
          echo "‚ö†Ô∏è  CORS methods header missing or incorrect"
        fi


    - name: Test Response Time
      run: |
        echo "‚è±Ô∏è  Testing auth worker response time..."
        
        START_TIME=$(date +%s%N)
        curl -s -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{"code":"test","state":"test"}' > /dev/null
        END_TIME=$(date +%s%N)
        
        DURATION=$(( ($END_TIME - $START_TIME) / 1000000 )) # Convert to milliseconds
        echo "Response time: ${DURATION}ms"
        
        if [ "$DURATION" -lt 5000 ]; then
          echo "‚úÖ Response time is good (< 5 seconds)"
        elif [ "$DURATION" -lt 10000 ]; then
          echo "‚ö†Ô∏è  Response time is acceptable (< 10 seconds)"
        else
          echo "‚ùå Response time is too slow (> 10 seconds)"
          exit 1
        fi

    - name: Generate Health Report
      if: always()
      run: |
        echo "üìä Auth Worker Health Report"
        echo "============================"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Endpoint: https://auth.tinova-ai.cc/api/github-oauth"
        echo ""
        
# Test both health and OAuth endpoints for comprehensive report
        HEALTH_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://auth.tinova-ai.cc/health)
        
        # Test OAuth endpoint with POST (the correct method)
        OAUTH_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{"code":"test","state":"test"}')
        
        OAUTH_CODE=$(echo "$OAUTH_RESPONSE" | tail -n1 | cut -d: -f2)
        OAUTH_BODY=$(echo "$OAUTH_RESPONSE" | head -n -1)
        
        echo "Health Endpoint (/health): $HEALTH_CODE"
        echo "OAuth Endpoint (/api/github-oauth POST): $OAUTH_CODE"
        echo "OAuth Response: $OAUTH_BODY"
        echo ""
        
        if [ "$HEALTH_CODE" -eq 200 ]; then
          echo "Service Status: ‚úÖ Worker Deployed and Running"
          echo "DNS Resolution: ‚úÖ Working"  
          echo "SSL Certificate: ‚úÖ Valid"
          echo "Health Endpoint: ‚úÖ Responsive"
          
          # Check if OAuth endpoint returns proper JSON error for invalid code
          if echo "$OAUTH_BODY" | grep -q '"error"' && [ "$OAUTH_CODE" -eq 400 ]; then
            echo "OAuth Endpoint: ‚úÖ Functional (proper error handling)"
            echo "Overall Status: ‚úÖ Fully Operational"
          elif [ "$OAUTH_CODE" -eq 404 ]; then
            echo "OAuth Endpoint: ‚ùå Route Not Found"
            echo "Overall Status: ‚ö†Ô∏è  Partial - Health OK, OAuth route missing"
          elif [ "$OAUTH_CODE" -eq 500 ]; then
            echo "OAuth Endpoint: ‚ö†Ô∏è  Internal Server Error (check environment variables)"
            echo "Overall Status: ‚ö†Ô∏è  Configuration Issue - Check APP_CLIENT_ID/SECRET"
          else
            echo "OAuth Endpoint: ‚ö†Ô∏è  Status $OAUTH_CODE"
            echo "Overall Status: ‚ö†Ô∏è  Needs Investigation"
          fi
        else
          echo "Service Status: ‚ùå Worker Health Failed"
          echo "DNS Resolution: ‚úÖ Working"
          echo "SSL Certificate: ‚úÖ Valid"
          echo "Health Endpoint: ‚ùå Status $HEALTH_CODE"
          echo "OAuth Endpoint: ‚ùå Cannot Test (Health Failed)"
          echo "Overall Status: ‚ùå Worker Deployment Issue"
        fi
        
        echo ""
        echo "This automated check verifies the Cloudflare auth worker"
        echo "used for GitHub OAuth authentication is operational."

    - name: Post Status to Slack/Discord (Optional)
      if: failure()
      run: |
        echo "üö® Auth worker verification failed!"
        echo "Consider setting up notifications to alert when auth worker is down"
        echo "Webhook URL can be added to secrets for real notifications"