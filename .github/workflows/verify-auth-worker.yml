name: Verify Cloudflare Auth Worker

on:
  # Run on every push and PR to monitor auth worker health
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Run daily at 9:00 AM UTC to catch infrastructure issues
  schedule:
    - cron: '0 9 * * *'
  
  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  verify-auth-worker:
    runs-on: ubuntu-latest
    name: Test Cloudflare Auth Worker Health
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test DNS Resolution
      run: |
        echo "üîç Testing DNS resolution for auth.tinova-ai.cc..."
        nslookup auth.tinova-ai.cc
        echo "‚úÖ DNS resolution successful"

    - name: Test SSL Certificate
      run: |
        echo "üîí Testing SSL certificate validity..."
        echo | openssl s_client -servername auth.tinova-ai.cc -connect auth.tinova-ai.cc:443 2>/dev/null | openssl x509 -noout -dates
        echo "‚úÖ SSL certificate is valid"

    - name: Test Auth Worker Endpoint Availability
      run: |
        echo "üåê Testing auth worker endpoint availability..."
        
        # First test root domain to understand routing
        echo "Testing root domain..."
        ROOT_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://auth.tinova-ai.cc/)
        echo "Root domain response: $ROOT_CODE"
        
        # Test the API endpoint
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          -X GET https://auth.tinova-ai.cc/api/github-oauth)
        
        echo "API endpoint response code: $HTTP_CODE"
        
        if [ "$HTTP_CODE" -eq 405 ]; then
          echo "‚úÖ Endpoint is reachable (405 Method Not Allowed is expected for GET request)"
        elif [ "$HTTP_CODE" -eq 200 ]; then
          echo "‚úÖ Endpoint is reachable and responding"
        elif [ "$HTTP_CODE" -eq 404 ]; then
          echo "‚ö†Ô∏è  Endpoint returns 404 - Worker may not be deployed or route not configured"
          echo "‚ÑπÔ∏è  This indicates the Cloudflare Worker needs to be deployed or route configured"
          # Don't exit - continue with other tests to provide full diagnostic info
        else
          echo "‚ö†Ô∏è  Unexpected response code: $HTTP_CODE - Worker may need configuration"
        fi

    - name: Test Auth Worker Request Format
      run: |
        echo "üìù Testing auth worker request/response format..."
        
        # Test with invalid data to check error handling
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{"code":"invalid_test_code","state":"test_state"}')
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        echo "Response body: $BODY"
        echo "HTTP code: $HTTP_CODE"
        
        # Check if worker responds appropriately to invalid requests
        if [ "$HTTP_CODE" -eq 400 ] || [ "$HTTP_CODE" -eq 401 ] || [ "$HTTP_CODE" -eq 422 ]; then
          echo "‚úÖ Auth worker properly handles invalid requests"
        elif [ "$HTTP_CODE" -eq 200 ]; then
          echo "‚ö†Ô∏è  Worker returned 200 for invalid code - check error handling"
          # Still pass the test as worker is functional
        elif [ "$HTTP_CODE" -eq 404 ]; then
          echo "‚ö†Ô∏è  Worker not deployed - 404 response indicates missing Cloudflare Worker"
          echo "‚ÑπÔ∏è  Action needed: Deploy the auth worker to Cloudflare"
        else
          echo "‚ö†Ô∏è  Unexpected response for request: $HTTP_CODE - Worker may need configuration"
        fi

    - name: Test Worker Error Response Format
      run: |
        echo "üö® Testing error response format..."
        
        # Test with missing required fields
        RESPONSE=$(curl -s \
          -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{}')
        
        echo "Response to empty body: $RESPONSE"
        
        # Check if response contains error field (JSON format)
        if echo "$RESPONSE" | grep -q '"error"' || echo "$RESPONSE" | grep -q '"message"'; then
          echo "‚úÖ Worker returns proper error format"
        else
          echo "‚ö†Ô∏è  Error format might need improvement, but worker is responsive"
        fi

    - name: Test CORS Headers (if applicable)
      run: |
        echo "üåê Testing CORS headers..."
        
        HEADERS=$(curl -s -I \
          -X OPTIONS https://auth.tinova-ai.cc/api/github-oauth \
          -H "Origin: https://tinova-ai.cc" \
          -H "Access-Control-Request-Method: POST")
        
        echo "CORS preflight response headers:"
        echo "$HEADERS"
        
        # Check for CORS headers (optional - some workers might not need CORS)
        if echo "$HEADERS" | grep -i "access-control"; then
          echo "‚úÖ CORS headers are configured"
        else
          echo "‚ÑπÔ∏è  No CORS headers found (may be intentional)"
        fi

    - name: Test Response Time
      run: |
        echo "‚è±Ô∏è  Testing auth worker response time..."
        
        START_TIME=$(date +%s%N)
        curl -s -X POST https://auth.tinova-ai.cc/api/github-oauth \
          -H "Content-Type: application/json" \
          -d '{"code":"test","state":"test"}' > /dev/null
        END_TIME=$(date +%s%N)
        
        DURATION=$(( ($END_TIME - $START_TIME) / 1000000 )) # Convert to milliseconds
        echo "Response time: ${DURATION}ms"
        
        if [ "$DURATION" -lt 5000 ]; then
          echo "‚úÖ Response time is good (< 5 seconds)"
        elif [ "$DURATION" -lt 10000 ]; then
          echo "‚ö†Ô∏è  Response time is acceptable (< 10 seconds)"
        else
          echo "‚ùå Response time is too slow (> 10 seconds)"
          exit 1
        fi

    - name: Generate Health Report
      if: always()
      run: |
        echo "üìä Auth Worker Health Report"
        echo "============================"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Endpoint: https://auth.tinova-ai.cc/api/github-oauth"
        echo ""
        
        # Test endpoint availability for report
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X GET https://auth.tinova-ai.cc/api/github-oauth)
        
        if [ "$HTTP_CODE" -eq 404 ]; then
          echo "Service Status: ‚ö†Ô∏è  Worker Not Deployed"
          echo "DNS Resolution: ‚úÖ Working"  
          echo "SSL Certificate: ‚úÖ Valid"
          echo "HTTP Endpoint: ‚ùå 404 Not Found"
          echo "Auth Worker: ‚ùå Not Deployed"
          echo ""
          echo "üö® ISSUE DETECTED: Cloudflare Worker is not deployed or route not configured"
          echo "   Action needed: Deploy auth worker to Cloudflare Workers"
        elif [ "$HTTP_CODE" -eq 405 ] || [ "$HTTP_CODE" -eq 200 ]; then
          echo "Service Status: ‚úÖ Available"
          echo "DNS Resolution: ‚úÖ Working"
          echo "SSL Certificate: ‚úÖ Valid" 
          echo "HTTP Endpoint: ‚úÖ Responsive"
          echo "Auth Worker: ‚úÖ Deployed"
        else
          echo "Service Status: ‚ö†Ô∏è  Unknown Status"
          echo "DNS Resolution: ‚úÖ Working"
          echo "SSL Certificate: ‚úÖ Valid"
          echo "HTTP Endpoint: ‚ö†Ô∏è  Status $HTTP_CODE"
          echo "Auth Worker: ‚ö†Ô∏è  Needs Investigation"
        fi
        
        echo ""
        echo "This automated check verifies the Cloudflare auth worker"
        echo "used for GitHub OAuth authentication is operational."

    - name: Post Status to Slack/Discord (Optional)
      if: failure()
      run: |
        echo "üö® Auth worker verification failed!"
        echo "Consider setting up notifications to alert when auth worker is down"
        echo "Webhook URL can be added to secrets for real notifications"