#!/bin/bash

# SSL Certificate Alert System for tinova-ai.cc
# Automated notification system for certificate expiration alerts
# Author: Jun Li <junli@intbot.ai>

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SSL_MONITOR_SCRIPT="$SCRIPT_DIR/ssl-monitor.sh"
ALERT_CONFIG="$SCRIPT_DIR/alert-config.json"
LOG_FILE="/tmp/ssl-alerts-$(date +%Y%m%d).log"

# Alert thresholds (days before expiration)
CRITICAL_THRESHOLD=7
WARNING_THRESHOLD=30

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
}

# Load alert configuration
load_alert_config() {
    if [[ -f "$ALERT_CONFIG" ]]; then
        log "Loading alert configuration from $ALERT_CONFIG"
        # Configuration loaded from JSON file
        return 0
    else
        log "No alert configuration found, using default settings"
        create_default_config
        return 0
    fi
}

# Create default alert configuration
create_default_config() {
    cat > "$ALERT_CONFIG" <<EOF
{
    "notifications": {
        "email": {
            "enabled": false,
            "recipients": ["admin@tinova-ai.cc"],
            "smtp_server": "localhost",
            "smtp_port": 587
        },
        "slack": {
            "enabled": false,
            "webhook_url": "",
            "channel": "#alerts"
        },
        "github": {
            "enabled": true,
            "create_issue": true,
            "repository": "Tinova-ai/tinova-web",
            "labels": ["ssl", "monitoring", "automated"]
        },
        "terminal": {
            "enabled": true,
            "color_output": true
        }
    },
    "thresholds": {
        "critical": 7,
        "warning": 30,
        "info": 60
    },
    "domains": [
        "tinova-ai.cc",
        "www.tinova-ai.cc"
    ]
}
EOF
    log "Created default alert configuration at $ALERT_CONFIG"
}

# Send email notification (placeholder)
send_email_alert() {
    local domain="$1"
    local days_left="$2"
    local alert_level="$3"
    local expiry_date="$4"
    
    log "Email notification: $alert_level alert for $domain (expires in $days_left days)"
    
    # This is a placeholder for email integration
    # You would implement actual SMTP sending here
    # Example using mail command:
    # echo "$message" | mail -s "SSL Certificate Alert: $domain" admin@tinova-ai.cc
}

# Send Slack notification (placeholder)
send_slack_alert() {
    local domain="$1"
    local days_left="$2"
    local alert_level="$3"
    local expiry_date="$4"
    
    log "Slack notification: $alert_level alert for $domain (expires in $days_left days)"
    
    # This is a placeholder for Slack webhook integration
    # Example using curl:
    # curl -X POST -H 'Content-type: application/json' \
    #     --data '{"text":"SSL Alert: '$domain' expires in '$days_left' days"}' \
    #     "$SLACK_WEBHOOK_URL"
}

# Create GitHub issue
create_github_issue() {
    local domain="$1"
    local days_left="$2"
    local alert_level="$3"
    local expiry_date="$4"
    
    local issue_title="[SSL Alert] Certificate for $domain expires in $days_left days"
    local issue_body="## SSL Certificate Expiration Alert

**Domain**: $domain  
**Days until expiration**: $days_left  
**Expiry date**: $expiry_date  
**Alert level**: $alert_level  

### Details
The SSL certificate for $domain is approaching expiration. This is an automated alert from the SSL monitoring system.

### Actions Required
- [ ] Verify GitHub Pages auto-renewal is functioning
- [ ] Check custom domain configuration in repository settings
- [ ] Monitor certificate renewal process
- [ ] Update monitoring if renewal fails

### Certificate Information
This certificate is managed through GitHub Pages with automatic Let's Encrypt renewal. The system should automatically renew certificates before expiration.

### Monitoring Script
This alert was generated by \`scripts/monitoring/ssl-alerts.sh\` at $(date -Iseconds).

---
*This is an automated issue created by the SSL monitoring system.*"

    if command -v gh >/dev/null 2>&1; then
        log "Creating GitHub issue for $domain certificate expiration"
        
        # Create the issue using GitHub CLI
        if gh issue create \
            --title "$issue_title" \
            --body "$issue_body" \
            --label "ssl,monitoring,automated,priority:$alert_level" 2>/dev/null; then
            log "Successfully created GitHub issue for $domain"
        else
            log "ERROR: Failed to create GitHub issue for $domain"
        fi
    else
        log "WARNING: GitHub CLI not available, cannot create issue"
    fi
}

# Send terminal notification
send_terminal_alert() {
    local domain="$1"
    local days_left="$2"
    local alert_level="$3"
    local expiry_date="$4"
    
    local color=""
    local icon=""
    
    case "$alert_level" in
        "critical")
            color="$RED"
            icon="🚨"
            ;;
        "warning")
            color="$YELLOW"
            icon="⚠️"
            ;;
        "info")
            color="$BLUE"
            icon="ℹ️"
            ;;
        *)
            color="$NC"
            icon="📢"
            ;;
    esac
    
    echo ""
    echo -e "${color}${icon} SSL CERTIFICATE ALERT${NC}"
    echo -e "${color}================================${NC}"
    echo -e "Domain: ${BLUE}$domain${NC}"
    echo -e "Days until expiration: ${color}$days_left${NC}"
    echo -e "Expiry date: $expiry_date"
    echo -e "Alert level: ${color}$alert_level${NC}"
    echo ""
}

# Process alert based on configuration
process_alert() {
    local domain="$1"
    local days_left="$2"
    local expiry_date="$3"
    
    local alert_level="info"
    
    # Determine alert level
    if [[ $days_left -le $CRITICAL_THRESHOLD ]]; then
        alert_level="critical"
    elif [[ $days_left -le $WARNING_THRESHOLD ]]; then
        alert_level="warning"
    fi
    
    log "Processing $alert_level alert for $domain (expires in $days_left days)"
    
    # Send notifications based on configuration
    # Always send terminal notification
    send_terminal_alert "$domain" "$days_left" "$alert_level" "$expiry_date"
    
    # Send other notifications if configured
    # send_email_alert "$domain" "$days_left" "$alert_level" "$expiry_date"
    # send_slack_alert "$domain" "$days_left" "$alert_level" "$expiry_date"
    
    # Create GitHub issue for critical and warning alerts
    if [[ "$alert_level" = "critical" || "$alert_level" = "warning" ]]; then
        create_github_issue "$domain" "$days_left" "$alert_level" "$expiry_date"
    fi
}

# Check certificate and trigger alerts
check_and_alert() {
    local domain="$1"
    
    log "Checking certificate status for $domain"
    
    # Run SSL monitor and capture JSON output
    local status_json
    if ! status_json=$("$SSL_MONITOR_SCRIPT" --domain "$domain" --json 2>/dev/null); then
        log "ERROR: Failed to get certificate status for $domain"
        return 1
    fi
    
    # Parse JSON output (requires jq)
    if command -v jq >/dev/null 2>&1; then
        local days_left expiry_date cert_status
        days_left=$(echo "$status_json" | jq -r '.days_until_expiration')
        expiry_date=$(echo "$status_json" | jq -r '.expiry_date')
        cert_status=$(echo "$status_json" | jq -r '.status')
        
        log "Certificate for $domain: $days_left days until expiration, status: $cert_status"
        
        # Process alert if certificate is approaching expiration
        if [[ $days_left -le $WARNING_THRESHOLD ]]; then
            process_alert "$domain" "$days_left" "$expiry_date"
        else
            log "Certificate for $domain is healthy ($days_left days remaining)"
        fi
    else
        log "WARNING: jq not available, cannot parse certificate status JSON"
        # Fallback: run basic SSL monitor
        "$SSL_MONITOR_SCRIPT" --domain "$domain"
    fi
}

# Main execution
main() {
    log "Starting SSL certificate alert system"
    
    # Load configuration
    load_alert_config
    
    # Check if SSL monitor script exists
    if [[ ! -f "$SSL_MONITOR_SCRIPT" ]]; then
        log "ERROR: SSL monitor script not found at $SSL_MONITOR_SCRIPT"
        exit 1
    fi
    
    # Check certificates for configured domains
    local domains=("tinova-ai.cc" "www.tinova-ai.cc")
    
    for domain in "${domains[@]}"; do
        check_and_alert "$domain"
    done
    
    log "SSL certificate alert system completed"
    echo -e "\n${BLUE}Alert log available at: $LOG_FILE${NC}"
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        cat <<EOF
SSL Certificate Alert System for tinova-ai.cc

Usage: $0 [OPTIONS] [DOMAIN]

Options:
    --help, -h      Show this help message
    --test          Test alert notifications without checking certificates
    --config        Show current alert configuration
    --setup         Setup cron job for automated alerts

Arguments:
    DOMAIN          Check specific domain (optional)

Examples:
    $0                    # Check all configured domains
    $0 tinova-ai.cc       # Check specific domain
    $0 --test             # Test alert system
    $0 --setup            # Setup automated monitoring

This script monitors SSL certificates and sends alerts when certificates
are approaching expiration (30, 14, 7 days before expiry).
EOF
        exit 0
        ;;
    --config)
        if [[ -f "$ALERT_CONFIG" ]]; then
            echo "Current alert configuration:"
            cat "$ALERT_CONFIG" | jq . 2>/dev/null || cat "$ALERT_CONFIG"
        else
            echo "No alert configuration found. Run script to create default config."
        fi
        exit 0
        ;;
    --test)
        log "Testing alert system with dummy data"
        process_alert "test.example.com" "5" "$(date -d '+5 days' '+%b %d %H:%M:%S %Y %Z' 2>/dev/null || date -v+5d '+%b %d %H:%M:%S %Y %Z')" 2>/dev/null || echo "Test completed"
        exit 0
        ;;
    --setup)
        echo "Setting up cron job for SSL certificate monitoring..."
        echo "# SSL Certificate Monitoring - runs twice daily"
        echo "0 9,21 * * * $PWD/scripts/monitoring/ssl-alerts.sh >/dev/null 2>&1"
        echo ""
        echo "Add the above line to your crontab using: crontab -e"
        exit 0
        ;;
    *)
        # If domain specified, check only that domain
        if [[ -n "${1:-}" ]]; then
            check_and_alert "$1"
        else
            # Default execution - check all domains
            main
        fi
        ;;
esac